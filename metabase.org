* metabase
 https://docs.github.com/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on

* build local
** docker
#+begin_src bash
  docker build -f ~/metabase/Dockerfile ~/metabase/. --tag metabase-0 --build-arg VERSION="0.48.8"
  docker run -d -p 3000:3000 --name metabase-0 metabase-0
#+end_src
** dev build
*** frontend
#+begin_src bash
  yarn install

  # build with hot reload
  # yarn build
  yarn build-hot
  yarn dev
#+end_src

*** backend
#+begin_src bash
  ./bin/build-drivers.sh
  ./bin/build-driver.sh sqlserver
  clojure -M:run
#+end_src

localhost:3000

*** notes
I have a local metabase build up and running with hot-reloading. Let me know if you run into any trouble.

See docs/developers-guild/build.md if you haven't.

You'll need specifically JDK 11, not the latest JDK. https://adoptium.net/installation/linux/
Clojure install tripped me up because the debian package was not compatible out of the box. Us this link like they suggest: https://clojure.org/guides/install_clojure

** production build
See docs/developers-guild/build.md if you haven't.

*** Building the Metabase Uberjar

The entire Metabase application is compiled and assembled into a single .jar file which can run on any modern JVM.
There is a script which will execute all steps in the process and output the final artifact for you.
You can pass the environment variable MB_EDITION before running the build script to choose the version that you want to build.
If you don't provide a value, the default is `oss` which will build the Community Edition.

    ./bin/build.sh

After running the build script simply look in `target/uberjar` for the output .jar file and you are ready to go.

*** Build  a Metabase Uberjar in a containerized environment

If you want to build Metabase without installing Clojure, Java, and Node.js on your host machine, you can build the Uberjar inside a container by running:
```
DOCKER_BUILDKIT=1 docker build --output container-output/ .
```
Make sure that your Docker Daemon is running before executing the command. After running the command, you'll find the Metabase JAR file at `./container-output/app/metabase.jar`.
* setup postgres
#+begin_src bash
  mkdir db
  cd db
  # initdb -D .
  pg_ctl init -D ./metabasedb

  # needed to solve postgres user expectations
  pg_ctl -D ./metabasedb -l logfile -o "--unix_socket_directories='$PWD'" start
  # this may be sufficient instead
  # postgres -D .
  pg_ctl -D ./metabasedb stop
#+end_src

#+begin_src bash
  nix-shell metabase.nix
  mkdir .dev_postgres
  mkdir .dev_postgres/data
  pg_setup
#+end_src

* nix-specific resources
https://mgdm.net/weblog/postgresql-in-a-nix-shell/

* mssql tls
metabase/modules/drivers/sqlserver
** error
SSL Protocol TLSv1.0 label is not valid. Only TLS, TLSv1, TLSv1.1, and TLSv1.2 are supported.

encrypt=false;trustServerCertificate=true;sslProtocol=TLSv1

"encrypt" property is set to "false" and "trustServerCertificate" property is set to "true" but the driver could not establish a secure connection to SQL Server by using Secure Sockets Layer (SSL) encryption: Error: The server selected protocol version TLS10 is not accepted by client preferences [TLS13, TLS12].
ClientConnectionId:1a1f9e7b-5b6a-4123-9360-6951e9ee378a

* helpful webpages
 - https://discourse.nixos.org/t/altering-package-oraclejdk11-installation-fails/46164/2
 - https://discourse.nixos.org/t/custom-ssl-certificates-for-jdk/18297/20

* how to deploy updates to metabase docker env without wiping
** notes
** where is postgres on btes?
** script
#+begin_src bash :tangle deploy_metabase-btes.sh
  ./bin/build-drivers.sh
  ./bin/build.sh
  yarn install
  yarn build
  docker build -f ~/metabase/Dockerfile ~/metabase/. --tag metabase --build-arg=VERSION=v0.48.8
  docker image save metabase > metabase.tar
  scp ~/metabase/metabase.tar carina@10.150.0.7:~/metabase/
  scp ~/metabase/redeploy_metabase-btes.sh carina@10.150.0.7:~/metabase/
  ssh -t carina@10.150.0.7 "sh ~/metabase/redeploy_metabase-btes.sh"
  rm metabase.tar
#+end_src

#+begin_src bash :tangle redeploy_metabase-btes.sh
  docker stop metabase
  docker rm metabase
  docker image load < ~/metabase/metabase.tar
  docker run \
         -d \
         -p 3000:3000 \
         -e "MB_DB_TYPE=postgres" \
         -e "MB_DB_DBNAME=postgres" \
         -e "MB_DB_PORT=5432" \
         -e "MB_DB_USER=postgres" \
         -e "MB_DB_PASS=metameta" \
         -e "MB_DB_HOST=10.150.0.7" \
         --restart unless-stopped \
         --name metabase metabase
#+end_src
